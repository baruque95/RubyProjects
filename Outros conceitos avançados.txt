Regex - Serve para fazer buscas em variáveis, podendo procurar por elementos
dentro de uma string, sejam números ou letras, seja para encontrar uma
sequência de caracteres. Possui como sintaxe a declaração entre barras /regex/,
podendo também ser declarada como Regexp.new('regex') ou %r{'regex'}.
Comandos de regex: /regex/.match('ex'), que busca pela sequencia 'ex' em regex,
/[0-10]/.match(3), que procura o numero 3 dentro do range de 0 a 10, 
/[a-z]/.match('m'), que procura pela letra m no range de a até z.
Pode-se também utilizar repetições, como por exemplo:
/[0-9][0-9]-[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]/.match('21-987654321')
se tornaria:
/[0-9]{2}-[0-9]{9}/.match('21-987654321')
ou ainda...
/\d{2}-\d{9}/.match('21-987654321'), onde \d procura por qualquer decimal.
O regex pode vir a ser util, por exemplo, em mineração de dados.

Time - É uma classe usada para representar datas e horas em ruby. 
Comandos: Time.now (cria uma instância do tempo agora. com o tempo de agora, pode-se
usar outras funções para aferir informações sobre ele)
Time.now.friday? - diz se o dia de hoje é sexta-feira
Time.now.strftime('%d/%m/%y') - formata a data atual
Time.now.strftime('%D') - devolve o dia
Time.now.strftime('%M') - devolve o minuto
Time.now.strftime('%m') - devolve o mês
Dentre outros. Documentação da biblioteca: https://ruby-doc.org/core-3.1.2/Time.html
Lembrando que, ao armazenar a data em uma variável, ela mantém a data do momento
quando a data foi armazenada. Para manter uma data atualizada, faz-se necessário
chamar a função continuamente.


Method missing - Caso algum método inexistente seja chamado, é executado no lugar dele
o método method_missing. Ele traz como parâmetro o nome do método inexistente que foi
tentado usar.

Self - chama o próprio. Seja a instância, caso o self seja chamado dentro de um método
de classe, ou a classe, caso o método seja self.metodo.

Private e Protected - Um método privado só pode ser chamado de dentro de uma instância
da classe e por um método público desta mesma classe. Um objeto consegue chamar um
método privado da sua própria classe mas não consegue chamar um método de outra
instância da mesma classe, enquanto nos objetos protegidos, é possível chamar um método
de outra instância de mesma classe.